
VCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d0c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f14  08000f14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f14  08000f14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f14  08000f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f14  08000f14  00010f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000f28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000f28  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000270c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b2e  00000000  00000000  00022741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000370  00000000  00000000  00023270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002f8  00000000  00000000  000235e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014181  00000000  00000000  000238d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000031eb  00000000  00000000  00037a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071bf1  00000000  00000000  0003ac44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bd0  00000000  00000000  000ac8b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08000ed8 	.word	0x08000ed8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08000ed8 	.word	0x08000ed8

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f907 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f000 fd68 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f911 	bl	8000496 <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f8e7 	bl	800045e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000028 	.word	0x20000028

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000028 	.word	0x20000028

080002e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <__NVIC_SetPriorityGrouping+0x44>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000304:	4013      	ands	r3, r2
 8000306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <__NVIC_SetPriorityGrouping+0x44>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	60d3      	str	r3, [r2, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <__NVIC_GetPriorityGrouping+0x18>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	0a1b      	lsrs	r3, r3, #8
 800033a:	f003 0307 	and.w	r3, r3, #7
}
 800033e:	4618      	mov	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	6039      	str	r1, [r7, #0]
 8000356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	db0a      	blt.n	8000376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	b2da      	uxtb	r2, r3
 8000364:	490c      	ldr	r1, [pc, #48]	; (8000398 <__NVIC_SetPriority+0x4c>)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	0112      	lsls	r2, r2, #4
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	440b      	add	r3, r1
 8000370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000374:	e00a      	b.n	800038c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4908      	ldr	r1, [pc, #32]	; (800039c <__NVIC_SetPriority+0x50>)
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	f003 030f 	and.w	r3, r3, #15
 8000382:	3b04      	subs	r3, #4
 8000384:	0112      	lsls	r2, r2, #4
 8000386:	b2d2      	uxtb	r2, r2
 8000388:	440b      	add	r3, r1
 800038a:	761a      	strb	r2, [r3, #24]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	e000e100 	.word	0xe000e100
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b089      	sub	sp, #36	; 0x24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b4:	69fb      	ldr	r3, [r7, #28]
 80003b6:	f1c3 0307 	rsb	r3, r3, #7
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	bf28      	it	cs
 80003be:	2304      	movcs	r3, #4
 80003c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3304      	adds	r3, #4
 80003c6:	2b06      	cmp	r3, #6
 80003c8:	d902      	bls.n	80003d0 <NVIC_EncodePriority+0x30>
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3b03      	subs	r3, #3
 80003ce:	e000      	b.n	80003d2 <NVIC_EncodePriority+0x32>
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d4:	f04f 32ff 	mov.w	r2, #4294967295
 80003d8:	69bb      	ldr	r3, [r7, #24]
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	43da      	mvns	r2, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	401a      	ands	r2, r3
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e8:	f04f 31ff 	mov.w	r1, #4294967295
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43d9      	mvns	r1, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	4313      	orrs	r3, r2
         );
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3724      	adds	r7, #36	; 0x24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3b01      	subs	r3, #1
 8000410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000414:	d301      	bcc.n	800041a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000416:	2301      	movs	r3, #1
 8000418:	e00f      	b.n	800043a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <SysTick_Config+0x40>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000422:	210f      	movs	r1, #15
 8000424:	f04f 30ff 	mov.w	r0, #4294967295
 8000428:	f7ff ff90 	bl	800034c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <SysTick_Config+0x40>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SysTick_Config+0x40>)
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000e010 	.word	0xe000e010

08000448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff49 	bl	80002e8 <__NVIC_SetPriorityGrouping>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	4603      	mov	r3, r0
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000470:	f7ff ff5e 	bl	8000330 <__NVIC_GetPriorityGrouping>
 8000474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	6978      	ldr	r0, [r7, #20]
 800047c:	f7ff ff90 	bl	80003a0 <NVIC_EncodePriority>
 8000480:	4602      	mov	r2, r0
 8000482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000486:	4611      	mov	r1, r2
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff5f 	bl	800034c <__NVIC_SetPriority>
}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ffb0 	bl	8000404 <SysTick_Config>
 80004a4:	4603      	mov	r3, r0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d101      	bne.n	80004c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80004be:	2301      	movs	r3, #1
 80004c0:	e26c      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 8087 	beq.w	80005de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004d0:	4b92      	ldr	r3, [pc, #584]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	f003 030c 	and.w	r3, r3, #12
 80004d8:	2b04      	cmp	r3, #4
 80004da:	d00c      	beq.n	80004f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004dc:	4b8f      	ldr	r3, [pc, #572]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f003 030c 	and.w	r3, r3, #12
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d112      	bne.n	800050e <HAL_RCC_OscConfig+0x5e>
 80004e8:	4b8c      	ldr	r3, [pc, #560]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004f4:	d10b      	bne.n	800050e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004f6:	4b89      	ldr	r3, [pc, #548]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d06c      	beq.n	80005dc <HAL_RCC_OscConfig+0x12c>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d168      	bne.n	80005dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	e246      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000516:	d106      	bne.n	8000526 <HAL_RCC_OscConfig+0x76>
 8000518:	4b80      	ldr	r3, [pc, #512]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a7f      	ldr	r2, [pc, #508]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 800051e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	e02e      	b.n	8000584 <HAL_RCC_OscConfig+0xd4>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10c      	bne.n	8000548 <HAL_RCC_OscConfig+0x98>
 800052e:	4b7b      	ldr	r3, [pc, #492]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a7a      	ldr	r2, [pc, #488]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000538:	6013      	str	r3, [r2, #0]
 800053a:	4b78      	ldr	r3, [pc, #480]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a77      	ldr	r2, [pc, #476]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e01d      	b.n	8000584 <HAL_RCC_OscConfig+0xd4>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000550:	d10c      	bne.n	800056c <HAL_RCC_OscConfig+0xbc>
 8000552:	4b72      	ldr	r3, [pc, #456]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a71      	ldr	r2, [pc, #452]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	4b6f      	ldr	r3, [pc, #444]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a6e      	ldr	r2, [pc, #440]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	e00b      	b.n	8000584 <HAL_RCC_OscConfig+0xd4>
 800056c:	4b6b      	ldr	r3, [pc, #428]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a6a      	ldr	r2, [pc, #424]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b68      	ldr	r3, [pc, #416]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a67      	ldr	r2, [pc, #412]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 800057e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800058c:	f7ff fea2 	bl	80002d4 <HAL_GetTick>
 8000590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000592:	e008      	b.n	80005a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000594:	f7ff fe9e 	bl	80002d4 <HAL_GetTick>
 8000598:	4602      	mov	r2, r0
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	2b64      	cmp	r3, #100	; 0x64
 80005a0:	d901      	bls.n	80005a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80005a2:	2303      	movs	r3, #3
 80005a4:	e1fa      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005a6:	4b5d      	ldr	r3, [pc, #372]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f0      	beq.n	8000594 <HAL_RCC_OscConfig+0xe4>
 80005b2:	e014      	b.n	80005de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005b4:	f7ff fe8e 	bl	80002d4 <HAL_GetTick>
 80005b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ba:	e008      	b.n	80005ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80005bc:	f7ff fe8a 	bl	80002d4 <HAL_GetTick>
 80005c0:	4602      	mov	r2, r0
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	2b64      	cmp	r3, #100	; 0x64
 80005c8:	d901      	bls.n	80005ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80005ca:	2303      	movs	r3, #3
 80005cc:	e1e6      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ce:	4b53      	ldr	r3, [pc, #332]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f0      	bne.n	80005bc <HAL_RCC_OscConfig+0x10c>
 80005da:	e000      	b.n	80005de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d063      	beq.n	80006b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80005ea:	4b4c      	ldr	r3, [pc, #304]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f003 030c 	and.w	r3, r3, #12
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00b      	beq.n	800060e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005f6:	4b49      	ldr	r3, [pc, #292]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f003 030c 	and.w	r3, r3, #12
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d11c      	bne.n	800063c <HAL_RCC_OscConfig+0x18c>
 8000602:	4b46      	ldr	r3, [pc, #280]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d116      	bne.n	800063c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <HAL_RCC_OscConfig+0x176>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	691b      	ldr	r3, [r3, #16]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d001      	beq.n	8000626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	e1ba      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000626:	4b3d      	ldr	r3, [pc, #244]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4939      	ldr	r1, [pc, #228]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000636:	4313      	orrs	r3, r2
 8000638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800063a:	e03a      	b.n	80006b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d020      	beq.n	8000686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 8000646:	2201      	movs	r2, #1
 8000648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800064a:	f7ff fe43 	bl	80002d4 <HAL_GetTick>
 800064e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000650:	e008      	b.n	8000664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000652:	f7ff fe3f 	bl	80002d4 <HAL_GetTick>
 8000656:	4602      	mov	r2, r0
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	2b02      	cmp	r3, #2
 800065e:	d901      	bls.n	8000664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000660:	2303      	movs	r3, #3
 8000662:	e19b      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f0      	beq.n	8000652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	4927      	ldr	r1, [pc, #156]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 8000680:	4313      	orrs	r3, r2
 8000682:	600b      	str	r3, [r1, #0]
 8000684:	e015      	b.n	80006b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800068c:	f7ff fe22 	bl	80002d4 <HAL_GetTick>
 8000690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000692:	e008      	b.n	80006a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000694:	f7ff fe1e 	bl	80002d4 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d901      	bls.n	80006a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80006a2:	2303      	movs	r3, #3
 80006a4:	e17a      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1f0      	bne.n	8000694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f003 0308 	and.w	r3, r3, #8
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d03a      	beq.n	8000734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d019      	beq.n	80006fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_RCC_OscConfig+0x274>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006cc:	f7ff fe02 	bl	80002d4 <HAL_GetTick>
 80006d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006d2:	e008      	b.n	80006e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80006d4:	f7ff fdfe 	bl	80002d4 <HAL_GetTick>
 80006d8:	4602      	mov	r2, r0
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d901      	bls.n	80006e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80006e2:	2303      	movs	r3, #3
 80006e4:	e15a      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_RCC_OscConfig+0x26c>)
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f0      	beq.n	80006d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 faa8 	bl	8000c48 <RCC_Delay>
 80006f8:	e01c      	b.n	8000734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_RCC_OscConfig+0x274>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000700:	f7ff fde8 	bl	80002d4 <HAL_GetTick>
 8000704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000706:	e00f      	b.n	8000728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000708:	f7ff fde4 	bl	80002d4 <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	2b02      	cmp	r3, #2
 8000714:	d908      	bls.n	8000728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000716:	2303      	movs	r3, #3
 8000718:	e140      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	42420000 	.word	0x42420000
 8000724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000728:	4b9e      	ldr	r3, [pc, #632]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 800072a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1e9      	bne.n	8000708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	2b00      	cmp	r3, #0
 800073e:	f000 80a6 	beq.w	800088e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000746:	4b97      	ldr	r3, [pc, #604]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10d      	bne.n	800076e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b94      	ldr	r3, [pc, #592]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a93      	ldr	r2, [pc, #588]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b91      	ldr	r3, [pc, #580]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800076e:	4b8e      	ldr	r3, [pc, #568]	; (80009a8 <HAL_RCC_OscConfig+0x4f8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000776:	2b00      	cmp	r3, #0
 8000778:	d118      	bne.n	80007ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800077a:	4b8b      	ldr	r3, [pc, #556]	; (80009a8 <HAL_RCC_OscConfig+0x4f8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a8a      	ldr	r2, [pc, #552]	; (80009a8 <HAL_RCC_OscConfig+0x4f8>)
 8000780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000786:	f7ff fda5 	bl	80002d4 <HAL_GetTick>
 800078a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800078c:	e008      	b.n	80007a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800078e:	f7ff fda1 	bl	80002d4 <HAL_GetTick>
 8000792:	4602      	mov	r2, r0
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b64      	cmp	r3, #100	; 0x64
 800079a:	d901      	bls.n	80007a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800079c:	2303      	movs	r3, #3
 800079e:	e0fd      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007a0:	4b81      	ldr	r3, [pc, #516]	; (80009a8 <HAL_RCC_OscConfig+0x4f8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0f0      	beq.n	800078e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d106      	bne.n	80007c2 <HAL_RCC_OscConfig+0x312>
 80007b4:	4b7b      	ldr	r3, [pc, #492]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007b6:	6a1b      	ldr	r3, [r3, #32]
 80007b8:	4a7a      	ldr	r2, [pc, #488]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6213      	str	r3, [r2, #32]
 80007c0:	e02d      	b.n	800081e <HAL_RCC_OscConfig+0x36e>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10c      	bne.n	80007e4 <HAL_RCC_OscConfig+0x334>
 80007ca:	4b76      	ldr	r3, [pc, #472]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	4a75      	ldr	r2, [pc, #468]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	6213      	str	r3, [r2, #32]
 80007d6:	4b73      	ldr	r3, [pc, #460]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007d8:	6a1b      	ldr	r3, [r3, #32]
 80007da:	4a72      	ldr	r2, [pc, #456]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007dc:	f023 0304 	bic.w	r3, r3, #4
 80007e0:	6213      	str	r3, [r2, #32]
 80007e2:	e01c      	b.n	800081e <HAL_RCC_OscConfig+0x36e>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	2b05      	cmp	r3, #5
 80007ea:	d10c      	bne.n	8000806 <HAL_RCC_OscConfig+0x356>
 80007ec:	4b6d      	ldr	r3, [pc, #436]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007ee:	6a1b      	ldr	r3, [r3, #32]
 80007f0:	4a6c      	ldr	r2, [pc, #432]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6213      	str	r3, [r2, #32]
 80007f8:	4b6a      	ldr	r3, [pc, #424]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007fa:	6a1b      	ldr	r3, [r3, #32]
 80007fc:	4a69      	ldr	r2, [pc, #420]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	6213      	str	r3, [r2, #32]
 8000804:	e00b      	b.n	800081e <HAL_RCC_OscConfig+0x36e>
 8000806:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000808:	6a1b      	ldr	r3, [r3, #32]
 800080a:	4a66      	ldr	r2, [pc, #408]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	6213      	str	r3, [r2, #32]
 8000812:	4b64      	ldr	r3, [pc, #400]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000814:	6a1b      	ldr	r3, [r3, #32]
 8000816:	4a63      	ldr	r2, [pc, #396]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000818:	f023 0304 	bic.w	r3, r3, #4
 800081c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d015      	beq.n	8000852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000826:	f7ff fd55 	bl	80002d4 <HAL_GetTick>
 800082a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800082c:	e00a      	b.n	8000844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800082e:	f7ff fd51 	bl	80002d4 <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	f241 3288 	movw	r2, #5000	; 0x1388
 800083c:	4293      	cmp	r3, r2
 800083e:	d901      	bls.n	8000844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000840:	2303      	movs	r3, #3
 8000842:	e0ab      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000844:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0ee      	beq.n	800082e <HAL_RCC_OscConfig+0x37e>
 8000850:	e014      	b.n	800087c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000852:	f7ff fd3f 	bl	80002d4 <HAL_GetTick>
 8000856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000858:	e00a      	b.n	8000870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800085a:	f7ff fd3b 	bl	80002d4 <HAL_GetTick>
 800085e:	4602      	mov	r2, r0
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	f241 3288 	movw	r2, #5000	; 0x1388
 8000868:	4293      	cmp	r3, r2
 800086a:	d901      	bls.n	8000870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800086c:	2303      	movs	r3, #3
 800086e:	e095      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000870:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000872:	6a1b      	ldr	r3, [r3, #32]
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1ee      	bne.n	800085a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d105      	bne.n	800088e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000882:	4b48      	ldr	r3, [pc, #288]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a47      	ldr	r2, [pc, #284]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800088c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f000 8081 	beq.w	800099a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000898:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 030c 	and.w	r3, r3, #12
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d061      	beq.n	8000968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d146      	bne.n	800093a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008ac:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <HAL_RCC_OscConfig+0x4fc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008b2:	f7ff fd0f 	bl	80002d4 <HAL_GetTick>
 80008b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008b8:	e008      	b.n	80008cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008ba:	f7ff fd0b 	bl	80002d4 <HAL_GetTick>
 80008be:	4602      	mov	r2, r0
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d901      	bls.n	80008cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80008c8:	2303      	movs	r3, #3
 80008ca:	e067      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1f0      	bne.n	80008ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a1b      	ldr	r3, [r3, #32]
 80008dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e0:	d108      	bne.n	80008f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	492d      	ldr	r1, [pc, #180]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80008f0:	4313      	orrs	r3, r2
 80008f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6a19      	ldr	r1, [r3, #32]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	430b      	orrs	r3, r1
 8000906:	4927      	ldr	r1, [pc, #156]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000908:	4313      	orrs	r3, r2
 800090a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <HAL_RCC_OscConfig+0x4fc>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000912:	f7ff fcdf 	bl	80002d4 <HAL_GetTick>
 8000916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000918:	e008      	b.n	800092c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800091a:	f7ff fcdb 	bl	80002d4 <HAL_GetTick>
 800091e:	4602      	mov	r2, r0
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	2b02      	cmp	r3, #2
 8000926:	d901      	bls.n	800092c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000928:	2303      	movs	r3, #3
 800092a:	e037      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0f0      	beq.n	800091a <HAL_RCC_OscConfig+0x46a>
 8000938:	e02f      	b.n	800099a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_RCC_OscConfig+0x4fc>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000940:	f7ff fcc8 	bl	80002d4 <HAL_GetTick>
 8000944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000946:	e008      	b.n	800095a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000948:	f7ff fcc4 	bl	80002d4 <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	2b02      	cmp	r3, #2
 8000954:	d901      	bls.n	800095a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000956:	2303      	movs	r3, #3
 8000958:	e020      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f0      	bne.n	8000948 <HAL_RCC_OscConfig+0x498>
 8000966:	e018      	b.n	800099a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d101      	bne.n	8000974 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e013      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_RCC_OscConfig+0x4f4>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	429a      	cmp	r2, r3
 8000986:	d106      	bne.n	8000996 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000992:	429a      	cmp	r2, r3
 8000994:	d001      	beq.n	800099a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40007000 	.word	0x40007000
 80009ac:	42420060 	.word	0x42420060

080009b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e0d0      	b.n	8000b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80009c4:	4b6a      	ldr	r3, [pc, #424]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d910      	bls.n	80009f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d2:	4b67      	ldr	r3, [pc, #412]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f023 0207 	bic.w	r2, r3, #7
 80009da:	4965      	ldr	r1, [pc, #404]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	4313      	orrs	r3, r2
 80009e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80009e2:	4b63      	ldr	r3, [pc, #396]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d001      	beq.n	80009f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e0b8      	b.n	8000b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d020      	beq.n	8000a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d005      	beq.n	8000a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a0c:	4b59      	ldr	r3, [pc, #356]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a58      	ldr	r2, [pc, #352]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a24:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4a52      	ldr	r2, [pc, #328]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a30:	4b50      	ldr	r3, [pc, #320]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	494d      	ldr	r1, [pc, #308]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d040      	beq.n	8000ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d107      	bne.n	8000a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a56:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d115      	bne.n	8000a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e07f      	b.n	8000b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d107      	bne.n	8000a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a6e:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e073      	b.n	8000b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e06b      	b.n	8000b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f023 0203 	bic.w	r2, r3, #3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	4936      	ldr	r1, [pc, #216]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000aa0:	f7ff fc18 	bl	80002d4 <HAL_GetTick>
 8000aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000aa6:	e00a      	b.n	8000abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa8:	f7ff fc14 	bl	80002d4 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e053      	b.n	8000b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f003 020c 	and.w	r2, r3, #12
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d1eb      	bne.n	8000aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ad0:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d210      	bcs.n	8000b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f023 0207 	bic.w	r2, r3, #7
 8000ae6:	4922      	ldr	r1, [pc, #136]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d001      	beq.n	8000b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e032      	b.n	8000b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d008      	beq.n	8000b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	4916      	ldr	r1, [pc, #88]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d009      	beq.n	8000b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	490e      	ldr	r1, [pc, #56]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b3e:	f000 f821 	bl	8000b84 <HAL_RCC_GetSysClockFreq>
 8000b42:	4601      	mov	r1, r0
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_RCC_ClockConfig+0x1c8>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	fa21 f303 	lsr.w	r3, r1, r3
 8000b56:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <HAL_RCC_ClockConfig+0x1cc>)
 8000b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_RCC_ClockConfig+0x1d0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb76 	bl	8000250 <HAL_InitTick>

  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000
 8000b74:	40021000 	.word	0x40021000
 8000b78:	08000f04 	.word	0x08000f04
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000000 	.word	0x20000000

08000b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b84:	b490      	push	{r4, r7}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000b8c:	1d3c      	adds	r4, r7, #4
 8000b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d002      	beq.n	8000bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d003      	beq.n	8000bca <HAL_RCC_GetSysClockFreq+0x46>
 8000bc2:	e02d      	b.n	8000c20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000bc6:	623b      	str	r3, [r7, #32]
      break;
 8000bc8:	e02d      	b.n	8000c26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	0c9b      	lsrs	r3, r3, #18
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000bd6:	4413      	add	r3, r2
 8000bd8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000bdc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d013      	beq.n	8000c10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	0c5b      	lsrs	r3, r3, #17
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000bf6:	4413      	add	r3, r2
 8000bf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000bfc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000c02:	fb02 f203 	mul.w	r2, r2, r3
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0e:	e004      	b.n	8000c1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	623b      	str	r3, [r7, #32]
      break;
 8000c1e:	e002      	b.n	8000c26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000c22:	623b      	str	r3, [r7, #32]
      break;
 8000c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000c26:	6a3b      	ldr	r3, [r7, #32]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc90      	pop	{r4, r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	08000ef0 	.word	0x08000ef0
 8000c38:	08000f00 	.word	0x08000f00
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	007a1200 	.word	0x007a1200
 8000c44:	003d0900 	.word	0x003d0900

08000c48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <RCC_Delay+0x34>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <RCC_Delay+0x38>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	0a5b      	lsrs	r3, r3, #9
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000c64:	bf00      	nop
  }
  while (Delay --);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	60fa      	str	r2, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1f9      	bne.n	8000c64 <RCC_Delay+0x1c>
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	10624dd3 	.word	0x10624dd3

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f7ff facc 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f801 	bl	8000c92 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <main+0xc>

08000c92 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b090      	sub	sp, #64	; 0x40
 8000c96:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	2228      	movs	r2, #40	; 0x28
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f911 	bl	8000ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fbf1 	bl	80004b0 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cd4:	f000 f818 	bl	8000d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe5d 	bl	80009b0 <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cfc:	f000 f804 	bl	8000d08 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3740      	adds	r7, #64	; 0x40
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_MspInit+0x5c>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <HAL_MspInit+0x5c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_MspInit+0x5c>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_MspInit+0x5c>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_MspInit+0x5c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_MspInit+0x5c>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_MspInit+0x60>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_MspInit+0x60>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <MemManage_Handler+0x4>

08000d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <BusFault_Handler+0x4>

08000d96 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <UsageFault_Handler+0x4>

08000d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f7ff fa74 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <SystemInit+0x5c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <SystemInit+0x5c>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <SystemInit+0x5c>)
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4911      	ldr	r1, [pc, #68]	; (8000e28 <SystemInit+0x5c>)
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <SystemInit+0x60>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <SystemInit+0x5c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <SystemInit+0x5c>)
 8000dee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <SystemInit+0x5c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SystemInit+0x5c>)
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <SystemInit+0x5c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <SystemInit+0x5c>)
 8000e0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e0e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SystemInit+0x5c>)
 8000e12:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e16:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SystemInit+0x64>)
 8000e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	f8ff0000 	.word	0xf8ff0000
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e36:	e003      	b.n	8000e40 <LoopCopyDataInit>

08000e38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e3e:	3104      	adds	r1, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e48:	d3f6      	bcc.n	8000e38 <CopyDataInit>
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e4c:	e002      	b.n	8000e54 <LoopFillZerobss>

08000e4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e50:	f842 3b04 	str.w	r3, [r2], #4

08000e54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e58:	d3f9      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5a:	f7ff ffb7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f000 f80f 	bl	8000e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff ff0f 	bl	8000c84 <main>
  bx lr
 8000e66:	4770      	bx	lr
  ldr r3, =_sidata
 8000e68:	08000f1c 	.word	0x08000f1c
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000e78:	2000002c 	.word	0x2000002c

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <__libc_init_array>:
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	2500      	movs	r5, #0
 8000e84:	4e0c      	ldr	r6, [pc, #48]	; (8000eb8 <__libc_init_array+0x38>)
 8000e86:	4c0d      	ldr	r4, [pc, #52]	; (8000ebc <__libc_init_array+0x3c>)
 8000e88:	1ba4      	subs	r4, r4, r6
 8000e8a:	10a4      	asrs	r4, r4, #2
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	d109      	bne.n	8000ea4 <__libc_init_array+0x24>
 8000e90:	f000 f822 	bl	8000ed8 <_init>
 8000e94:	2500      	movs	r5, #0
 8000e96:	4e0a      	ldr	r6, [pc, #40]	; (8000ec0 <__libc_init_array+0x40>)
 8000e98:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <__libc_init_array+0x44>)
 8000e9a:	1ba4      	subs	r4, r4, r6
 8000e9c:	10a4      	asrs	r4, r4, #2
 8000e9e:	42a5      	cmp	r5, r4
 8000ea0:	d105      	bne.n	8000eae <__libc_init_array+0x2e>
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
 8000ea4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ea8:	4798      	blx	r3
 8000eaa:	3501      	adds	r5, #1
 8000eac:	e7ee      	b.n	8000e8c <__libc_init_array+0xc>
 8000eae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eb2:	4798      	blx	r3
 8000eb4:	3501      	adds	r5, #1
 8000eb6:	e7f2      	b.n	8000e9e <__libc_init_array+0x1e>
 8000eb8:	08000f14 	.word	0x08000f14
 8000ebc:	08000f14 	.word	0x08000f14
 8000ec0:	08000f14 	.word	0x08000f14
 8000ec4:	08000f18 	.word	0x08000f18

08000ec8 <memset>:
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4402      	add	r2, r0
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d100      	bne.n	8000ed2 <memset+0xa>
 8000ed0:	4770      	bx	lr
 8000ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ed6:	e7f9      	b.n	8000ecc <memset+0x4>

08000ed8 <_init>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr

08000ee4 <_fini>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	bf00      	nop
 8000ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eea:	bc08      	pop	{r3}
 8000eec:	469e      	mov	lr, r3
 8000eee:	4770      	bx	lr
